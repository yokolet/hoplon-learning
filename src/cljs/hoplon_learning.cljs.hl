(page "hoplon-learning.html"
  (:require [hoplon.reveal :refer [slideshow chapter slide notes highlight quicklist bullet]]
            [tailrecursion.hoplon.reload :as r]
            [hoplon.phones :as p]
            [hoplon.samples :as a]
            [hoplon.util :as u]
            [hoplon.spreadsheet :as s]
))

(r/reload-all)

(defn chapter-intro []
    (chapter :title "User Interface Implementation in Clojure (and ClojureScript)"
           (slide :title "Why UI in Clojure?"
                  (bullet "Something least good at")
                  (ul
                   (li :class "fragment" :data-fragment-index "1"
                       "I am on the server side")
                   (li :class "fragment" :data-fragment-index "2"
                       "I am a Ruby developer")))
           (slide :title "It should be a good chance"
                  (bullet "Thanks for giving me this chance")
                  (br)
                  (div :class "fragment" :data-fragment-index "1"
                       (bullet "... and torture myself to get started")))
           (slide :title "Yes, Hoplon!"
                  (bullet :class "fragment" :data-fragment-index "1" "Just learned")
                  (bullet :class "fragment" :data-fragment-index "2" "Looks easy to get started"))
           (slide :title "Wrote this slide by Hoplon!"
                  (bullet "What I learned is ...")
                  (ul
                   (li :class "fragment" :data-fragment-index "1" "How to use Hoplon")
                   (li :class "fragment" :data-fragment-index "2" "How to work with AngularJS")
                   (li :class "fragment" :data-fragment-index "3" "How to write ClojureScript")))
           (slide :title "My Hoplon Study Slides"
                  (u/url "http://github.com/yokolet/hoplon-learning"))
           ))

(defn chapter-hoplon []
  (chapter :title "What is Hoplon?"
           (slide :title "Hoplon is a ClojureScript client-side framework"
           (bullet "written by Alan Dipert and Micha Niskin")
           (bullet (u/url "http://hoplon.io")))
    (slide :title "Hoplon trilogy"
           (bullet "Boot")
           (bullet "Javlin")
           (bullet "HList"))
    (slide :title "Hoplon trilogy : Boot"
           (bullet :class "fragment" :data-fragement-index "1" "\"A boot loader for Clojure programs\" by Alan")
           (bullet :class "fragment" :data-fragement-index "2" "(to me, newbie...) Works as a replacement of leiningen")
           (br)
           (bullet :class "fragment" :data-fragement-index "3" "Born from deep thoughts and passions")
           (bullet :class "fragment" :data-fragement-index "4" "(to me, newbie...) Boot makes everything easy to write ClojureScript code"))
    (slide :title "Hoplon trilogy : Boot"
           (bullet (code "build.boot"))
           (highlight #= (slurp "build.boot")))
    (slide :title "Hoplon trilogy : Boot"
           (bullet (code "$ boot present"))
           (highlight
            ;;{{
            $ boot present
            Serving slides at http://localhost:8000/hoplon-learning.html
            Installing ClojureScript dependencies...
            Jetty server stored in atom here: #'tailrecursion.boot.task.ring/server...
            Compiling Hoplon pages...
            • src/cljs/hoplon/phones.cljs.hl
            • src/cljs/hoplon/reveal.cljs.hl
            • src/cljs/hoplon/util.cljs.hl
            • src/cljs/hoplon_learning.cljs.hl
            • src/cljs/learning_step_zero.cljs.hl
            Compiling ClojureScript...
            2014-03-16 12:35:21.949:INFO:oejs.Server:jetty-7.6.1.v20120215
            2014-03-16 12:35:21.986:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8000
            ↳ Elapsed time: 10.834 sec › 00:01:06
            ;;}}
              ))
    (slide :title "Hoplon trilogy : Javlin"
           (bullet :class "fragment" :data-fragment-index "1" "Javelin is a state machine")
           (bullet :class "fragment" :data-fragment-index "2" "Easy to write")
           (bullet :class "fragment" :data-fragment-index "3" "Easy to understand what's going on")
           (br)
           (bullet :class "fragment" :data-fragment-index "4" "Duplicates with AngularJS' data binding"))
    (slide :title "Hoplon trilogy : Javlin"
           (bullet "Works like MS-Excel or Google spreadsheet")
           (br)
           (quicklist "Input Cells" "Formula Cells"))
    (slide :title "Hoplon trilogy : Javlin"
           (highlight
            ;;{{
            (ns hoplon.spreadsheet)
            (def int js/parseInt)
            (defc cell-a 0) ; input cell
            (defc cell-b 0)
            (defc cell-c 0)
            (defc= sum (+ cell-a cell-b cell-c)) ; formula cell
            ;;}}
            )
           (table
            (tr
             (th "A") (th "B") (th "C") (th "SUM"))
            (tr
             (td (input
                  :id "a0"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-a (s/int (val-id "a0")))))
             (td (input
                  :id "b0"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-b (s/int (val-id "b0")))))
             (td (input
                  :id "c0"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-c (s/int (val-id "c0")))))
             (td (text " = ~{s/sum}"))
             )))
    (slide :title "Hoplon trilogy : Javlin"
           (highlight
            ;;{{
             (td (input
                  :id "a" :type "text" :value "0"
                  :on-change #(reset! s/cell-a (s/int (val-id "a")))))
             (td (input
                  :id "b" :type "text" :value "0"
                  :on-change #(reset! s/cell-b (s/int (val-id "b")))))
             (td (input
                  :id "c" :type "text" :value "0"
                  :on-change #(reset! s/cell-c (s/int (val-id "c")))))
             (td (text " = ~{s/sum}"))
            ;;}}
            )
           (table
            (tr
             (th "A") (th "B") (th "C") (th "SUM"))
            (tr
             (td (input
                  :id "a"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-a (s/int (val-id "a")))))
             (td (input
                  :id "b"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-b (s/int (val-id "b")))))
             (td (input
                  :id "c"
                  :type "text"
                  :value "0"
                  :on-change #(reset! s/cell-c (s/int (val-id "c")))))
             (td (text " = ~{s/sum}"))
             )))
    (slide :title "Hoplin trilogy : HLisp"
           (bullet :class "fragment" :data-fragment-index "1" "HTML as s-expressions")
           (bullet :class "fragment" :data-fragment-index "2" "HTML tags by ClojureScript"))
    (slide :title "Hoplin trilogy : HLisp"
           (highlight
            ;;{{
            (defn quicklist
              [& things]
              (ul
               (loop-tpl :bindings [x things]
             (li @x))))
            ;;}}
            ) ;; highlight
           (highlight
            ;;{{
           (quicklist "Input Cells" "Formula Cells")
            ;;}}
            )
           ) ;; slide
    ) ;; chapter
  ) ;; defn

(defn chapter-angular []
  (chapter :title "Holon with AngularJS"
           (slide :title "External Javascript"
                  (bullet "inc.js extension files -> resources/public/main.js")
                  (highlight
                   ;;{{
                   ./src
                   ├── clj
                   │   └── devserver.clj
                   └── cljs
                   ├── angular.inc.js
                   ├── head.inc.js
                   ├── hoplon
                   │   ├── reveal.cljs.hl
                   │   ├── samples.cljs.hl
                   │   ├── spreadsheet.cljs.hl
                   │   └── util.cljs.hl
                   ├── hoplon_learning.cljs.hl
                       └── reveal.inc.js
                   ;;}}
                   )
                  (p "Nothing here {{'yet' + '!'}}")
                  (highlight
                   ;;{{
                   (html :ng-app "hoplonApp"
                          (p "Nothing here { {'yet' + '!'}}"))
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   <html ng-app="hoplonApp" ng-class="ng-scope">
                     <p class= "ng-binding">Nothing here yet!</p>
                   </html>
                   ;;}}
                   )
                  ) ;; slide
           (slide :title "AngularJS controller"
                  (highlight
                   ;;{{
                   (ns hoplon.samples)
                   (def hoplonApp
                     (.module js/angular "hoplonApp" (array)))
                   (defn namesListCtrl [$scope]
                     (def $scope.phones (clj->js [{"name" "Nexus S"
                                                   "snippet" "4 Fast just got faster with Nexus S."}
                                                  {"name" "Motorola XOOM™ with Wi-Fi"
                                                   "snippet" "The Next, Next Generation tablet."}
                                                  {"name" "MOTOROLA XOOM™'"
                                                   "snippet" "The Next, Next Generation tablet."}]))
)
                   (.controller hoplonApp "NamesListCtrl" namesListCtrl)
                   ;;}}
                   )
                  ) ;; slide
           (slide :title "AngularJS HTML"
                  (highlight
                   ;;{{
                   (p :ng-controller "NamesListCtrl"
                      (ul
                       (li :ng-repeat "phone in phones" "{ {phone.name}}"
                          (p "{ {phone.snippet}}"))))
                   ;;}}
                   )
                  (p :ng-controller "NamesListCtrl"
                     (ul
                      (li :ng-repeat "phone in phones" "{{phone.name}}"
                          (p "{{phone.snippet}}"))))
                  ) ;; slide
           (slide :title "Ajax by AngularJS"
                  (bullet "Get request returns : "
                          (a :target "_blank" :href "/phones.json" "phones.json"))
                  (highlight
                   ;;{{
                   (defn namesListCtrlAjax [$scope $http]
                     (-> $http
                         (.get "/phones.json")
                         (.success (fn [data]
                                     (def $scope.phonedata data))))
                     )
                   (.controller hoplonApp "PhoneListCtrlAjax" namesListCtrlAjax)
                   ;;}}
                   )
                  ) ;; slide
           (slide :title "Ajax by AngularJS"
                  (highlight
                   ;;{{
                   (tr :ng-repeat "phone in phonedata"
                           (td "{ {phone.id}}") (td "{ {phone.name}}") (td "{ {phone.year}}"))
                   ;;}}
                   )
                  (div :ng-controller "NamesListCtrlAjax"
                     (table
                      (thead
                       (tr
                        (th "ID") (th "name") (th "year")))
                      (tbody
                       (tr :ng-repeat "phone in phonedata"
                           (td "{{phone.id}}") (td "{{phone.name}}") (td "{{phone.year}}"))))
                     )
                  ) ;; slide
           (slide :title "AngularJS Data Binding"
                  (highlight
                   ;;{{
                   (input :type "text"
                          :ng-model "yourname" :placeholder "Enter a name here" "your-name")
                   (bullet "Hello { {yourname}}")
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   <div class= "ng-binding">Hello </div>
                   ;;}}
                   )
                  (input :type "text" :ng-model "yourname" :placeholder "Enter a name here" "your-name")
                  (bullet "Hello {{yourname}}")
                  ) ;; slide
           ) ;; chapter
  ) ;; defn

(html :ng-app "hoplonApp"
        (head
         (title "Hoplon Learning"))
        (body
         (slideshow :theme "solarized"
                    (chapter-intro)
                    (chapter-hoplon)
                    (chapter-angular))))
