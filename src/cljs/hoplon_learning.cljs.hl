(page "hoplon-learning.html"
  (:require [hoplon.reveal :refer [slideshow chapter slide notes highlight quicklist bullet]]
            [tailrecursion.hoplon.reload :as r]
            [hoplon.samples :as a]
            [hoplon.util :as u]
            [hoplon.spreadsheet :as s]
            [hoplon.datamodel :as d]
))

(r/reload-all)

(defn chapter-intro []
    (chapter :title "User Interface Implementation in Clojure (and ClojureScript)"
           (slide :title "Why UI in Clojure?"
                  (bullet :class "fragment" :data-fragment-index "1" "Something least good at")
                  (ul
                   (li :class "fragment" :data-fragment-index "2"
                       "I am on the server side")
                   (li :class "fragment" :data-fragment-index "3"
                       "I am a Ruby developer")))
           (slide :title "It should be a good chance"
                  (bullet "Thanks for giving me this chance")
                  (br)
                  (bullet :class "fragment" :data-fragment-index "1"
                          "... and decided to torture myself to get started")
                  (bullet :class "fragment" :data-fragment-index "2"
                          "... but, no idea where to start")
                  )
           (slide :title "Yes, Hoplon!"
                  (bullet :class "fragment" :data-fragment-index "1" "Just learned")
                  (bullet :class "fragment" :data-fragment-index "2" "It was easy to get started")
                  (bullet :class "fragment" :data-fragment-index "3" "A newbie can start right away."))
           (slide :title "Wrote this slide by Hoplon!"
                  (bullet "What I learned is ...")
                  (ul
                   (li :class "fragment" :data-fragment-index "1" "How to use Hoplon")
                   (li :class "fragment" :data-fragment-index "2" "How to work with AngularJS on Hoplon")
                   (li :class "fragment" :data-fragment-index "3" "How to write ClojureScript")))
           (slide :title "My Hoplon Study Slides"
                  (div "Web: " (u/url "http://yokolet.github.io/hoplon-learning/"))
                  (div "Code: " (u/url "http://github.com/yokolet/hoplon-learning")))
           ))

(defn chapter-hoplon []
  (chapter :title "What is Hoplon?"
           (slide :title "Hoplon is a ClojureScript client-side framework"
           (bullet "written by Alan Dipert and Micha Niskin")
           (bullet (u/url "http://hoplon.io")))
    (slide :title "Hoplon trilogy"
           (bullet "Boot")
           (bullet "Javlin")
           (bullet "HLisp"))
    (slide :title "Hoplon trilogy : Boot"
           (bullet :class "fragment" :data-fragement-index "1" "\"A boot loader for Clojure programs\" by Alan")
           (bullet :class "fragment" :data-fragement-index "2" "(to me, a newbie...) Works as a replacement of leiningen")
           (br)
           (bullet :class "fragment" :data-fragement-index "3" "Born from deep thoughts and passions")
           (bullet :class "fragment" :data-fragement-index "4" "(to me, a newbie...) Boot makes everything easy to write ClojureScript code"))
    (slide :title "Hoplon trilogy : Boot"
           (bullet (code "build.boot"))
           (highlight #= (slurp "build.boot")))
    (slide :title "Hoplon trilogy : Boot"
           (bullet (code "$ boot present"))
           (highlight
            ;;{{
            $ boot present
            Serving slides at http://localhost:8000/hoplon-learning.html
            Installing ClojureScript dependencies...
            Jetty server stored in atom here: #'tailrecursion.boot.task.ring/server...
            Compiling Hoplon pages...
            • src/cljs/hoplon/phones.cljs.hl
            • src/cljs/hoplon/reveal.cljs.hl
            • src/cljs/hoplon/util.cljs.hl
            • src/cljs/hoplon_learning.cljs.hl
            • src/cljs/learning_step_zero.cljs.hl
            Compiling ClojureScript...
            2014-03-16 12:35:21.949:INFO:oejs.Server:jetty-7.6.1.v20120215
            2014-03-16 12:35:21.986:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8000
            ↳ Elapsed time: 10.834 sec › 00:01:06
            ;;}}
              )
           (bullet "a small caveat - need to install boot")
           )
    (slide :title "Hoplon trilogy : Javlin"
           (bullet :class "fragment" :data-fragment-index "1" "Javlin is a state machine")
           (bullet :class "fragment" :data-fragment-index "2" "Can write in ClojureScript")
           (bullet :class "fragment" :data-fragment-index "3" "Javlin is simple")
           (bullet :class "fragment" :data-fragment-index "4" "Javlin is easy to use")
           (bullet :class "fragment" :data-fragment-index "5" "Clear what's going on")
           (br)
           (bullet :class "fragment" :data-fragment-index "6" "a caveat - duplicates with AngularJS' data binding"))
    (slide :title "Hoplon trilogy : Javlin"
           (bullet "Works like MS-Excel or Google spreadsheet")
           (br)
           (quicklist "Input Cells" "Formula Cells"))
    (slide :title "Hoplon trilogy : Javlin"
           (highlight
            ;;{{
            (ns hoplon.spreadsheet)
            (def int js/parseInt)
            (defc cell-a 0) ; input cell
            (defc cell-b 0)
            (defc cell-c 0)
            (defc= sum (+ cell-a cell-b cell-c)) ; formula cell
            ;;}}
            )
           (table
            (tr
             (th "A") (th "B") (th "C") (th "SUM"))
            (tr
             (td (input
                  :id "a0"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-a (s/int (val-id "a0")))))
             (td (input
                  :id "b0"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-b (s/int (val-id "b0")))))
             (td (input
                  :id "c0"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-c (s/int (val-id "c0")))))
             (td (text " ~{s/sum}"))
             )))
    (slide :title "Hoplon trilogy : Javlin"
           (highlight
            ;;{{
             (td (input
                  :id "a" :type "text" :value "0"
                  :on-input #(reset! s/cell-a (s/int (val-id "a")))))
             (td (input
                  :id "b" :type "text" :value "0"
                  :on-input #(reset! s/cell-b (s/int (val-id "b")))))
             (td (input
                  :id "c" :type "text" :value "0"
                  :on-input #(reset! s/cell-c (s/int (val-id "c")))))
             (td (text "~{s/sum}"))
            ;;}}
            )
           (table
            (tr
             (th "A") (th "B") (th "C") (th "SUM"))
            (tr
             (td (input
                  :id "a"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-a (s/int (val-id "a")))))
             (td (input
                  :id "b"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-b (s/int (val-id "b")))))
             (td (input
                  :id "c"
                  :type "text"
                  :value "0"
                  :on-input #(reset! s/cell-c (s/int (val-id "c")))))
             (td (text "~{s/sum}"))
             )))
    (slide :title "Hoplon trilogy : HLisp"
           (bullet :class "fragment" :data-fragment-index "1" "\"HTML as s-expressions\"")
           (bullet :class "fragment" :data-fragment-index "2" "HTML tags by ClojureScript")
           (bullet :class "fragment" :data-fragment-index "3" "!!! by ClojureScript")
           (bullet :class "fragment" :data-fragment-index "4" "Easier than Hiccup"))
    (slide :title "Hoplon trilogy : HLisp"
           (bullet "Can write a function")
           (highlight
            ;;{{
            (defn quicklist
              [& things]
              (ul
               (loop-tpl :bindings [x things]
             (li @x))))
            ;;}}
            ) ;; highlight
           (highlight
            ;;{{
           (quicklist "Input Cells" "Formula Cells")
            ;;}}
           )
           ) ;; slide
    (slide :title "Hoplon trilogy : HLisp"
           (bullet "Can define a tag")
           (highlight
            ;;{{
            (defelem highlight
              [attrs children]
              (pre (code attrs children)))
            ;;}}
            )
           )
    ) ;; chapter
  ) ;; defn

(defn chapter-angular []
  (chapter :title "Holon with AngularJS"
           (slide :title "External Javascript"
                  (bullet "inc.js extension files -> resources/public/main.js")
                  (highlight
                   ;;{{
                   ./src
                   ├── clj
                   │   └── devserver.clj
                   └── cljs
                   ├── angular.inc.js
                   ├── head.inc.js
                   ├── hoplon
                   │   ├── reveal.cljs.hl
                   │   ├── samples.cljs.hl
                   │   ├── spreadsheet.cljs.hl
                   │   └── util.cljs.hl
                   ├── hoplon_learning.cljs.hl
                       └── reveal.inc.js
                   ;;}}
                   )
                  (p "Nothing here {{'yet' + '!'}}")
                  (highlight
                   ;;{{
                   (html :ng-app "hoplonApp"
                         (p "Nothing here { {'yet' + '!'}}"))
                   ;; intentionally puts a space between leading double
                   ;; curly braces to show syntax
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   <html ng-app="hoplonApp" ng-class="ng-scope">
                     <p class= "ng-binding">Nothing here yet!</p>
                   </html>
                   ;;}}
                   )
                  ) ;; slide
           (slide :title "AngularJS controller"
                  (bullet "in ClojureScript")
                  (highlight
                   ;;{{
                   (ns hoplon.samples)
                   (def hoplonApp
                     (.module js/angular "hoplonApp" (array)))
                   (defn namesListCtrl [$scope]
                     (aset $scope "phones" (clj->js [{"name" "Nexus S"
                                                      "snippet" "4 Fast just got faster with Nexus S."}
                                                     {"name" "Motorola XOOM™ with Wi-Fi"
                                                      "snippet" "The Next, Next Generation tablet."}
                                                     {"name" "MOTOROLA XOOM™'"
                                                      "snippet" "The Next, Next Generation tablet."}]))
)
                   (.controller hoplonApp "NamesListCtrl" namesListCtrl)
                   ;;}}
                   )
                  (bullet "* phones are scope local values")
                  ) ;; slide
           (slide :title "AngularJS HTML"
                  (highlight
                   ;;{{
                   (p :ng-controller "NamesListCtrl"
                      (ul
                       (li :ng-repeat "phone in phones" "{ {phone.name}}"
                          (p "{ {phone.snippet}}"))))
                   ;;}}
                   )
                  (p :ng-controller "NamesListCtrl"
                     (ul
                      (li :ng-repeat "phone in phones" "{{phone.name}}"
                          (p "{{phone.snippet}}"))))
                  ) ;; slide
           (slide :title "Ajax by AngularJS"
                  (bullet "Get request returns : "
                          (a :target "_blank" :href "/phones.json" "phones.json"))
                  (highlight
                   ;;{{
                   (defn namesListCtrlAjax [$scope $http]
                     (-> $http
                         (.get "/hoplon-learning/phones.json")
                         (.success (fn [data]
                                     (aset $scope "phonedata" data))))
                     )
                   (.controller hoplonApp "PhoneListCtrlAjax" namesListCtrlAjax)
                   ;;}}
                   )
                  ) ;; slide
           (slide :title "Ajax by AngularJS"
                  (highlight
                   ;;{{
                   (tr :ng-repeat "phone in phonedata"
                           (td "{ {phone.id}}") (td "{ {phone.name}}") (td "{ {phone.year}}"))
                   ;;}}
                   )
                  (div :ng-controller "NamesListCtrlAjax"
                     (table :class "reveal"
                      (thead
                       (tr
                        (th "ID") (th "name") (th "year")))
                      (tbody
                       (tr :ng-repeat "phone in phonedata"
                           (td "{{phone.id}}") (td "{{phone.name}}") (td "{{phone.year}}"))))
                     )
                  ) ;; slide
           ) ;; chapter
  ) ;; defn

(defn chapter-comparison []
  (chapter :title "Comparison: AngularJS Data Binding and Javlin"
           (slide :title "AngularJS Data Binding"
                  (highlight
                   ;;{{
                   (input :type "text"
                          :ng-model "yourname" :placeholder "Enter a name here" "your-name")
                   (bullet "Hello { {yourname}}")
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   <div class= "ng-binding">Hello </div>
                   ;;}}
                   )
                  (input :type "text" :ng-model "yourname" :placeholder "Enter a name here" "your-name")
                  (bullet "Hello {{yourname}}")
                  ) ;; slide
           (slide :title "Javlin"
                  (highlight
                   ;;{{
                   (defc your-name "everyone")
                   (input :id "input-name" :type "text"
                          :placeholder "Enter a name here"
                          :on-input #(reset! d/your-name (val-id "input-name")))
                   (bullet (text "Hello ~{d/your-name} "))
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   <div>Hello everyone</div>
                   ;;}}
                   )
                  (input :id "input-name" :type "text"
                         :placeholder "Enter a name here"
                         :on-input #(reset! d/your-name (val-id "input-name")))
                  (bullet (text "Hello ~{d/your-name} "))
                  ) ;; slide
           (slide :title "AngularJS Data Binding"
                  #_(div :ng-model "myngmodel0"
                       (div "myngmodel0 {{myngmodel0}}")
                       (button :ng-click "myngmodel0=1" :class "btn btn-large" "1")
                       (button :ng-click "myngmodel0=2" :class "btn btn-large" "2")
                       (button :ng-click "myngmodel0=3" :class "btn btn-large" "3")
                       )
                  (div :ng-controller "ButtonsCtrl" :ng-model "myngmodel", :ng-init "myngmodel=1"
                       (button :ng-repeat "index in ['1', '2', '3', '4']" :ng-click "update(index)" :class "btn btn-large" "{{index}}")
                       (div (img :src "/hoplon-learning/img/picture{{myngmodel}}.png")))
                  )
           (slide :title "AngularJS Data Binding Code"
                  (highlight
                   ;;{{
                   (defn buttonsCtrl [$scope]
                     (aset $scope "update" (fn [index] (aset $scope "myngmodel" index))))
                   (.controller hoplonApp "ButtonsCtrl" buttonsCtrl)
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   (div :ng-controller "ButtonsCtrl" :ng-model "myngmodel", :ng-init "myngmodel=1"
                        (button :ng-repeat "index in ['1', '2', '3', '4']" :ng-click "update(index)" :class "btn btn-large" "{ {index}}")
                       (div (img :src "/hoplon-learning/img/picture{ {myngmodel}}.png")))
                   ;;}}
                   )
                  )
           (slide :title "Javlin"
                  (div
                   (loop-tpl :bindings [x [1 2 3 4]]
                             (button :on-click #(reset! d/myjvlmodel @x) :class "btn btn-large" (str @x)))
                   (div (img :src d/picture-url)))
                  )
           (slide :title "Javlin Code"
                  (highlight
                   ;;{{
                   (ns hoplon.datamodel)
                   (defc myjvlmodel 1)
                   (defc= picture-url (str "/hoplon-learning/img/picture" myjvlmodel ".png"))
                   ;;}}
                   )
                  (highlight
                   ;;{{
                   (div
                    (loop-tpl :bindings [x [1 2 3 4]]
                              (button :on-click #(reset! d/myjvlmodel @x) :class "btn btn-large" (str @x)))
                    (div (img :src d/picture-url)))
                   ;;}}
                   )
                  )
           ) ;; chapter
  ) ;; defn

(defn chapter-conclusion []
  (chapter :title "Conclusion"
           (slide :title "Hoplon as a Client Side Framework"
                  (bullet :class "fragment" :data-fragment-index "1" "Boot - made it easy to develop")
                  (bullet :class "fragment" :data-fragment-index "2" "Javlin - made it easy to understand")
                  (bullet :class "fragment" :data-fragment-index "3" "HLisp - made it easy to write and extensible")
                  ) ;; slide
           (slide :title "AngularJS on Hoplon"
                  (bullet :class "fragment" :data-fragment-index "1" "It works")
                  (bullet :class "fragment" :data-fragment-index "2" "One of the choices")
                  (bullet :class "fragment" :data-fragment-index "3" "AngularJS directives are handy")
                  )
           (slide :title "AngularJS vs Hoplon"
                  (bullet :class "fragment" :data-fragment-index "1" "Both can do the same thing")
                  (bullet :class "fragment" :data-fragment-index "2" "AngularJS like Hoplon directives?")

                  (br)
                  (bullet :class "fragment" :data-fragment-index "3" "AngularJS's documentation is awesome!")
                  )
           (slide :title "Thanks Alan and Micha"
                  (bullet "I enjoyed Hoplon coding")
                  (bullet "I will try more"))
           (slide :title "Thank you all!"
                  (div "Web: " (u/url "http://yokolet.github.io/hoplon-learning/"))
                  (div "Code: " (u/url "http://github.com/yokolet/hoplon-learning")))
           )
  )

(html :ng-app "hoplonApp"
        (head
         (title "Hoplon Learning"))
        (body
         (slideshow :theme "solarized"
                    (chapter-intro)
                    (chapter-hoplon)
                    (chapter-angular)
                    (chapter-comparison)
                    (chapter-conclusion))))